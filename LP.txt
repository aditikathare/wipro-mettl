/* VOWEL 
String s="WIPRO TECHNOLOGIES";
	int input1=0,input2=0;
	String str="",str1="";
	String s1=s.toUpperCase();
	for(int i=0;i<s1.length();i++) {
		char ch=s1.charAt(i);
		if(input1==0) {
			if(ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U') {
				str+=ch;
			}	
			}
		if(input1==1) {
			if(!(ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U')) {
				str+=ch;
			}	
			}
		if(input2==0) {
			str1=str.toUpperCase();
			}
		if(input2==1) {
			str1=str.toLowerCase();
			}
		
			}
	System.out.println(str1);*/

/*Same and Different
		String input1="tech";
		String input2="TECHNOLOGY";
		String ch="";
		String str="",str1="";
		String s1=input1.toUpperCase();
		String s2=input2.toUpperCase();
		int len1=s1.length();
		int len2=s2.length();
		char arr[]=new char[len2];
		int input3=0;
		
		if(input3==0) {
			for(int i=0;i<len1;i++) {
				ch=Character.toString(s1.charAt(i));
				if(s2.contains(ch))
					str+=ch;
			}
			for(int j=0;j<len2;j++) {
				ch=Character.toString(s2.charAt(j));
				if(s1.contains(ch))
					str1+=ch;
			}
				
			}
		System.out.println(str+" "+str1);*/

/* Ascii Prime
public class asciiPrime {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s="NiCita";
		int sum=0;
		String str="";
		String str1="";
		
		
		for(int i=0;i<s.length();i++) {
			char ch=s.charAt(i);
			int n=ch;
			if(n==67||n==71||n==73||n==79||n==83||n==89||n==97||n==101||n==103||n==109||n==113) {
				str+=ch;
				sum+=n;
				
			}
		}
			if(sum>0) {
				str1=str+":"+sum;
			}
			else {
				char c=s.charAt(0);
				char c1=s.charAt(s.length()-1);
				str1=c+":"+c1;
			}
			System.out.println(str1);
	}

	}*/


/* Remove digit to form palindrome
	public int digitRemove_Palin(int input1){
		// Read only region end
		// Write code here...
		String s=""+input1;
	       
		int len=s.length();
	   int[] a=new int[len];
		for(int i=0;i<len;i++){
			a[i]=Character.getNumericValue(s.charAt(i));
		}
		int output=0;
	   for(int i=0;i<len;i++){
		  if(a[i]==a[len-(i+1)])
			  continue;
		   else{
			   if(a[i]==a[len-(i+2)]){
				   output=a[len-(i+1)];
				   break;
			   }
			   else if(a[i+1]==a[len-(i+1)]){
				   output=a[i];
				   break;
			   }
		   }
		  }
		if(output==0){
			return -1;
		}
		return output;
	}
   }*/

/* Longest Odd Sequence

	public int getLen_LS_ODD(int[] input1,int input2){
int count=0,k=0;
for(int i=0;i<input2;i++){
if(input1[i]%2!=0){
count++;
			
if(count>k){
k=count;
}
}
		
else{
count=0;
}
}
		
if(k==0)
return -1;
else
return k;
			}
} */

/* Decreasing sequence
public Result decreasingSeq(int[] input1,int input2){
    		int count=1,k=0;
		int seq=0;
		for(int i=0;i<input2-1;i++){
			if(input1[i]>input1[i+1]){
				count++;
				if(k<count){
					k=count;
				}
				if(count==2){
				    seq++;
				}
			}
				else{
					count=1;
				}
			}
		return new Result(seq,k);
		} */

/* Traverse array find key */
public int findKey(int[] input1,int input2){
	boolean flag=true;
	int sum=0;
	int[] k=new int[input2];
	int key=0;
	for(int i=0;i<input2;i++){
		if(input1[i]>0)
		flag=false;
	}
	if(!flag){
		for(int i=0;i<input2;i++){
		if(key<input2){
		if(input1[key]>99 && input1[key]<=999){
		if(input1[key]<0){
			k[i]=(-1)*(input1[key]/100);
		}
		else
			k[i]=input1[key]/100;
		if(input1[key]>0){
		key=input1[key]%100;
		}
		else
			break;
	}
	else{
		if(input1[key]<0){
		k[i]=(-1)*(input1[key]/10);
		}
		else
			k[i]=input1[key]/10;
		if(input1[key]>0){
		key=input1[key]%10;
		}
		else
			break;
		}
	}}}
	else if(flag){
	Arrays.sort(input1);
	sum=input1[input2-1];
	return sum;
	}
	for(int i=0;i<k.length;i++){
		if(i%2==0){
			sum+=k[i];
	}
	else{
		sum-=k[i];
}
}
return sum;
}
}

// create pswd_2words_3parts
	/*String s1[]=divideString(input1);
	String s2[]=divideString(input2);
		String pwd=s1[2]+s2[1]+s1[0];
		return pwd;
	}
	public String[] divideString(String input){
		int rem=input.length()%3;
		int div=input.length()/3;
		String f=null,m=null,l=null;
		if(rem==1){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div+1);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==2){
			f=input.substring(0,div);
			m=input.substring(div,div+div+rem);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==0){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div);
			l=input.substring(f.length()+m.length(),input.length());
		}
		return new String[]{f,m,l};*/


// GET CODE USING STRINGS
/*int len=0,len1=0;
		String str[]=input1.split(" ");
		int n=str.length;
		for(int i=0;i<n;i++){
			len+=str[i].length();
		}
		while(len>0){
			len1+=len%10;
			len/=10;
			
		}len1+=len;
	return len1;*/

//Add_using_Strings
/* import java.Math.BigInteger;	
BigInteger b1=new BigInteger(input1);
		BigInteger b2=new BigInteger(input2);
		BigInteger sum=b1.add(b2);
		return sum.toString();*/

//Single_Encoded_Array

/* int a[]=new int[input2];
		int i,sum=0;
		a[input2-1]=input1[input2-1];
		for(i=input2-2;i>=0;i--){
			a[i]=input1[i]-a[i+1];
			
		}
        for(i=0;i<a.length;i++){
			sum+=a[i];
		}
    return new Result(a[0],sum);*/

//Sum_power_dig
/*int res=0,a=0;
		String s=Integer.toString(input1);
		int ar[]=new int[s.length()];
		for(int i=0;input1!=0;i++){
			a=input1%10;
			ar[i]=a;
			input1/=10;
		}
		for(int i=ar.length-1;i>0;i--){
			res+=(int)Math.pow(ar[i],ar[i-1]);
		}
		res+=(int)Math.pow(ar[0],0);
		return res;*/


//Sum_dig_cyclic(5+8+2+1+0+9)+(8+..)

/*int sum=0,sum1=0;
		while(input1!=0)
		{
			sum+=input1%10;
			sum1+=sum;
			input1/=10;
		}
		return sum1;*/

//Sum_cyclic(5+(5+8)+(5+8+2)....)
/*int s=0,s1=0,s2=input1;
int r=0;
while(input1!=0){
while(input1!=0){
s+=input1%10;
input1/=10;
}
s1+=s;
s=0;
s2/=10;
input1=s2;
}
return s1;
}*/

//possible_wrd

/*StringBuffer sb=new StringBuffer();
		String words[]=input2.split(":");
		int pos=input1.indexOf("_");
		for(String s:words){
			if(s.length()==input1.length()){
				if(s.substring(0,pos).equalsIgnoreCase(input1.substring(0,pos))&& s.substring(pos+1,s.length()).equalsIgnoreCase(input1.substring(pos+1,input1.length()))){
				sb.append(s.toUpperCase()+":");
					
				}
			}
		}
		if(sb.length()>0)
			return sb.toString().substring(0,sb.length()-1);
		else
			return "ERROR-009";*/

//Encoding_3_String

/* String s1[]=divideString(input1);
	    String s2[]=divideString(input2);
		String s3[]=divideString(input3);
		String in1=s1[0]+s2[0]+s3[0];
		String in2=s1[1]+s2[1]+s3[1];
		String in3=s1[2]+s2[2]+s3[2];
		String fstr=toggleString(in3);
		return new Result(in1,in2,fstr);
	}
	public String[] divideString(String input){
		int rem=input.length()%3;
		int div=input.length()/3;
		String f=null,m=null,l=null;
		if(rem==1){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div+rem);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==2){
			f=input.substring(0,div+1);
			m=input.substring(f.length(),f.length()+div);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==0){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div);
			l=input.substring(f.length()+m.length(),input.length());
		}
		return new String[]{f,m,l};
        
    }
	public String toggleString(String str){
		char ch[]=str.toCharArray();
		String s="";
		for(int i=0;i<ch.length;i++){
			if(Character.isLowerCase(ch[i])){
				s+=Character.toUpperCase(ch[i]);
			}if(Character.isUpperCase(ch[i])){
				s+=Character.toLowerCase(ch[i]);
			}
		}
		return s;
	}*/



//alt_add_sub
/*  int i=0,res1=0,res2=0,res=0;
	   for(i=0;i<input1;i++){
		  if(input2==1){
		   if(i%2==0){
			   res1+=input1-i;
		   }
		   else{
			   res2-=input1-i;
		   }
	   }
		   if(input2==2){
		   if(i==0||i%2!=0){
			   res1+=input1-i;
		   }
		   else{
			   res2-=input1-i;
		   }
	   }  
		   res=res1+res2;
	   }
       return res; */
//User_id_gen
/*int len1=input1.length();
		int len2=input2.length();
		String s=""+input3;
		int c=Character.getNumericValue(s.charAt(input4-1));
		int d=Character.getNumericValue(s.charAt(s.length()-input4));
		char sName='a';
		String lName="";
		String str="";
		if(len1>len2){
			sName=input2.charAt(len2-1);
			lName=input1;
		}else if(len2>len1){
			sName=input1.charAt(len1-1);
			lName=input2;
		}else if(len1==len2){
			if(input2.charAt(0)>input1.charAt(0)){
				sName=input1.charAt(len1-1);
			lName=input2;
			}else{
			sName=input2.charAt(len2-1);
			lName=input1;
		}
		}
	String f=String.valueOf(sName)+lName;
		for(int i=0;i<f.length();i++){
			if(Character.isUpperCase(f.charAt(i))){
				str+=String.valueOf(Character.toLowerCase(f.charAt(i)));
			}else{
				str+=String.valueOf(Character.toUpperCase(f.charAt(i)));
			}
		}
		return str+c+d;*/
//Sum_non_prime
/*int num=0;
		int sumOfElm=0;
		for(int i=1;i<input2;i++){
			int count=0;
			for(num=i;num>=1;num--){
				if(i%num==0){
					count+=1;
				}
			}
			if(count!=2){
				sumOfElm+=input1[i];
			}
		}
		sumOfElm+=input1[0];
		return sumOfElm;*/

//Jumble_word
/* publicString JumbleWords(String input1,int input2){
input1=input1.toUpperCase();
String s[]=input1.split(" ");
String output="";
if(input2==1){
for(int i=0;i<s.length();i++){
String word="";
for(int j=0;j<s[i].length();j++){
if(j%2==0)
word+=s[i].charAt(j);
}
for(int j=s[i].length()-1;j>0;j--){
if(j%2!=0)
word+=s[i].charAt(j);
}
output=output+words+" ";
}
}
if(input2==2){
for(int i=0;i<s.length();i++){
String word="";
for(int j=0;j<s[i].length();j++){
if(j%2==0)
word+=s[i].charAt(j);
}
for(int j=0;j<s[i].length();j++){
if(j%2!=0)
word+=s[i].charAt(j);
}
output=output+words+" ";
}
}

return output.trim();
}
}*/ 	




/*--------------Frequency........................*/

/*public class FRequecy {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int i,j;
		int maxdigit=0;
		int input1[]={1234,666,201,278};
			int digit[]=new int[10];
			for(i=0;i<10;i++)
			{
				int num=input1[i];
				while(num>0)
				{
					int rem=num%10;System.out.println(rem);
					for( j=0;j<10;j++)
					{
						if(num==j)
						{System.out.println(true);
							digit[j]=j+1;
							System.out.println(digit[j]);
						}
						num=num/10;
						System.out.println(num);
					}
				}
				 	int max=digit[0];
			
				for(i=0;i<10;i++)
				{
					if(digit[i]>=max)
					{
						if(i>maxdigit)
						{
							max=digit[i];
							max=i;
						}
					}
						
					}
				
			}	
			
		
			System.out.println(maxdigit); 
			

	}

}*/
/*............sumOf negative sequence........*/

/*public class SumOfLongestdecreasingSequence {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]={-12,-4,-6,7,8,9,-5,-4,-3,-8};
		int max=0,newsum=0,j=0;
		for(int i=0;i<arr.length;i++)
		{ 
	      if(	arr[i]<0)
	{ int  sum=0,count=0;
		for( j=i;j<arr.length;j++)
		{
			if(arr[j]<0)
			{
				sum=sum+arr[j];
				count++;
			}
			else
			{
				break;
			}
		}
		if(count>max)
		{
			max=count;
			newsum=sum;
		}
		else if(count==max)
		{
			newsum+=sum;
		}i=j;
	}
	     
		} System.out.println(newsum);
		
	}*/

/*........rsf.............*/
/*public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=987654;
		String str="";
		String s=Integer.toString(n);
		//int l=s.length();
		while(s.length()>0)
		{
			int l=s.length();
			for(int i=0;i<l/2;i++)
			{
				int rem=Math.abs(s.charAt(i)-s.charAt(l-i-1));
				str=str+rem;
				//System.out.println(str);
			}
		   if(l%2!=0)
		   
			   str=str+s.charAt(l/2);
		   
		   
		   if(str.length()==2)
		   
				System.out.println(str);
				s=str;
				str="";
			

		}*/

/*................LOcalisaton...........*/

/*public class Localisation {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
String s="Local";
String st = ""; 
if(s.length()>10){
char ch=s.charAt(0);
int l=s.length()-2;
char ch1=s.charAt(s.length()-1);
st=st+ch+l+ch1;
System.out.println(st);
}
else
{
	System.out.println(s);}

	}

}*/


/*..........prime............*/

/*package Prime;

public class Noep {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int input1 = 23450;
		String st="";
		String str = "";
		String s = Integer.toString(input1);
		for (int i = 0; i < s.length(); i++)
		{
			if(s.charAt(i)%2==0)
			{
				str=str+"e";
			}
			if(s.charAt(i)%2!=0)
			{
				str=str+"o";
			}
			if(s.charAt(i)=='0')
			{
				str=str+"e";
			}

	}
		System.out.println(str);
		}*/

/*........nextt didgit subtraction.......*/
package Prime;

public class Difference {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s=Integer.toString(951623);
		String str="";
		int n=0;
		while(s.length()>0)
		{
			int l=s.length();
		for(int i=0;i<l-1;i++)
		{
			
			int rem=Math.abs(s.charAt(i)-s.charAt(i+1));
			//System.out.println(rem);
			str=str+rem;
		}
		//System.out.println(str);
		
if(str.length()==1)
{ 
	//n=Integer.parseInt(str);
	System.out.println(str);}
	s=str;
	str="";
}


}}


/*.........Have Anice DAy.......*/

/*public class HaveANiceDay {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s3="",s4="";
		int i;
		String s="Have A Nice Day";
		int len=s.length();
		String fina[]=new String[len];
		String r3="",fin="";
		int input1=34;
		int a=input1%10;
		int b=input1/10;
		
		String[] s1=s.split(" ");
		for( i=0;i<s1.length;i++)
		{
			String s2=s1[i];
			int l=s2.length();
			if(l%2==0)
			{
				s3=s2.substring(0,l/2 );
				s4=s2.substring(l/2);
				StringBuffer sbf=new StringBuffer(s3);
				
	
				sbf.reverse();
				r3=sbf.toString();
				//System.out.println(r3);
			
			}
			else
			{
				s3=s2.substring(0,(l/2)+1);
				s4=s2.substring(l/2);
				StringBuffer sbf1=new StringBuffer(s3);
				sbf1.reverse();
				r3=sbf1.toString();
			//	System.out.println(r3);
				
			}
			fin=r3+s4;
			fina[i]=fin;
		}
		
		System.out.println(fina[a-1]+" "+fina[b-1]);
		

	}

}*/


/* Person And Token*/


import java.io.*;
import  java.util.*;

// Read only region start
class UserMainCode
{

	public String findSequence(int input1,String[] input2,int[] input3){
		// Read only region end
		// Write code here...
		int var=0;
		int index=0;
		int count=1;
		int arr[]=new int[input1];
		for(int k=0;k<input1;k++)
		arr[k]=input3[k];
		int abc[]=new int[3];
		int flag=0;
		Arrays.sort(arr);
		
		int len=arr.length;
		for(int i=0;i<len;i++) {
			if(i!=len-1) {
				if(arr[i]+1==arr[i+1]) {
					if(var==0) {
						index=i;
						var++;
					}
					count++;
					if(count<3)
						continue;
					else 
						{flag=1;
						break;
						}
				}
			
				else {
					var=0;
					index=0;
					count=1;
					continue;
				}
			}
			}
		
		if(flag==1) {
		for(int i=0;i<input1;i++) {
			if(input3[i]==arr[index]) { 
				abc[0]=i;
				}
			else if(input3[i]==arr[index+1]) {
				abc[1]=i;
			}
			else if(input3[i]==arr[index+2]) {
				abc[2]=i;
			}
			
		}
		
		
		String str= input2[abc[0]]+":"+input2[abc[1]]+":"+input2[abc[2]];
		return str;
		}
		else
		return "NONE";
		
	}
}*/


/* Most Frequent Occurring */

	/*public int mostFrequentlyOccurringDigit(int[] input1,int input2){
		// Read only region end
		// Write code here...
		int rem=0;
			int count=0,count1=0,count2=0,count3=0,count4=0,count5=0,count6=0,count7=0,count8=0,count9=0;
			for(int i=0;i<input2;i++) {
				while(input1[i]!=0) {
					rem=input1[i]%10;
					input1[i]/=10;
					
					switch(rem) {
					case 0: count++;
							break;
							
					case 1: count1++;
							break;
							
					case 2: count2++;
							break;
							
					case 3: count3++;
							break;
							
					case 4: count4++;
							break;
							
					case 5: count5++;
							break;
					
					case 6: count6++;
							break;
					
					case 7: count7++;
							break;
					
					case 8: count8++;
							break;
					
					case 9: count9++;
							break;
					default: 
							break;
					}
				}
			}
				Integer arr[]= {count,count1,count2,count3,count4,count5,count6,count7,count8,count9};
				int d=0,max=0;
				for(int i=0;i<10;i++) {
					if(arr[i]>=max) {
						max=arr[i];
						d=i;
					}
				}
				return d;

		
	}
}*/


/* Generate Sequence find Nth element*/
		
		/*int arr[]= new int[300];
		arr[0]=input1;
		arr[1]=input2;
		arr[2]=input3;
		int output=0;
		int d1=input2-input1;
		int d2=input3-input2;
		for(int i=3;i<input4;i+=2){
			arr[i]=arr[i-1]+d1;
			arr[i+1]=arr[i]+d2;
		}
		for(int i=0;i<input4;i++){
			if(i==input4-1){
				output=arr[i];
			}
		}
		return output;
		
	}
}*/

/* SUM OF POWER */

		/*int sum=0;
		
		int a=input1%10;
		while(input1!=0){
		input1=input1/10;
		int b=input1%10;
		sum+=(int)Math.pow(b,a);
			//sa=b;
		}
		
		return sum+1;*/
---------------------------------------------------------------------------------------------------------------
/* INCREASING EVEN */


/*public class increasing_even {
	public static void main(String[] args) {
		
	
	int[] input1={9,2,4,6,8,10,11,7,9,2,4,6,8,10};
	int count=1;
	int maxcount=0;
	for(int i=0;i<input1.length-1;i++){
	if((input1[i]%2==0&&input1[i+1]%2==0)&&(input1[i]<input1[i+1]))
	{
	count++;
	}
	else 
	if(count>maxcount)
	{
	maxcount=count;
	count=1;
	}
	}
	if(count>maxcount){
	maxcount=count;
	}
System.out.println(maxcount);
}
}*/

---------------------------------------------------------------------------------------------------------------

/* ALTERNATE ADD_SUB */

/*int sum=0,sum1=0;
		int res=0;
        if(input2==1){
	for(int i=0;i<input1;i++){
	if(i%2==0){
	sum=sum+(input1-i); 
				
	}
	else{
		sum1+=(input1-i);
				
	}
					
}
//System.out.println(sum);
 res=sum-sum1;
}else {
	for(int i=0;i<input1;i++){
		if(i%2!=0){
		sum+=(input1-i); 
		 System.out.println(sum);
	}
				
	else{
	sum1+=(input1-i);	
	 System.out.println(sum1);
	}
			
	}
res=sum-sum1+2*input1;
System.out.println(res);
		}
return 	res;*/

---------------------------------------------------------------------------------------------------------------

