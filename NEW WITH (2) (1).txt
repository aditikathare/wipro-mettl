********************************FIND STRING CODE(world wide web)*************************************************

public int findStringCode(string input1)
    {
        //Read only region end
        //Write code here
				
            String input2 = input1.ToLower();
            String a = "abcdefghijklmnopqrstuvwxyz";
                      
            String[] k = input2.Split(' ');
            int[] r = new int[k.Length];

            for (int j = 0; j < k.Length; j++)
            {
                int sum = 0;
                if (k[j].Length % 2 != 0)
                {
                    int c = k[j].Length / 2;
                    int m = 0;
                    int n = k[j].Length - 1;
                    for (int i = 0; i < k[j].Length / 2; i++)
                    {
                        sum = sum + Math.Abs(((a.IndexOf(k[j].Substring(m, 1)) + 1) - (a.IndexOf(k[j].Substring(n, 1)) + 1)));
                        m++;
                        n--;
                    }
                    sum = sum + a.IndexOf(k[j].Substring(c, 1)) + 1;
                    r[j] = sum;
                }

                else
                {
                    int m = 0;
                    int n = k[j].Length - 1;
                    for (int i = 0; i < k[j].Length / 2; i++)
                    {
                        sum = sum + Math.Abs(((a.IndexOf(k[j].Substring(m, 1)) + 1) - (a.IndexOf(k[j].Substring(n, 1)) + 1)));
                        m++;
                        n--;
                    }
                    
                    r[j] = sum;


                }
               

            }
         
            String[] h = new String[r.Length];
            for (int i = 0; i < r.Length; i++)
            {
                h[i] = r[i].ToString();
            }

            String str = null;
            for (int i = 0; i < r.Length; i++)
            {
                str = str + h[i];
            }

            int z= Convert.ToInt32(str);
		return z;        
    }


********************************GET CODE THROUGH STRINGS(wipro technologies)***************************************
int len=0,len1=0;
		String[] str=input1.split(" ");
		int n=str.Length;
		for(int i=0;i<n;i++){
			len+=str[i].Length;
		}
		while(len>0){
			len1+=len%10;
			len/=10;
			
		}len1+=len;
	return len1;

*********************************ADDITION USING STRING (JAVA)****************************************************
//Add_using_Strings
/* import java.math.BigInteger;	
BigInteger b1=new BigInteger(input1);
		BigInteger b2=new BigInteger(input2);
		BigInteger sum=b1.add(b2);
		return sum.toString();*/

************************************************Simple_Encoded_Array  (TWO TEST CASE NOT PASSES)************************

 int[] a=new int[10];
		int i,sum=0;
        Result obj= new Result();
		a[input2-1]=input1[input2-1];
		for(i=input2-2;i>=0;i--){
			a[i]=input1[i]-a[i+1];
			
		}
        for(i=0;i<a.Length;i++){
			sum+=a[i];
		}

        obj.output1= a[0];
        obj.output2= sum;
    return obj;

*****************************************Decreasing sequence**************************************************
public Result decreasingSeq(int[] input1,int input2){
    Result obj= new Result();
        int count=1,k=0;
		int seq=0;
		for(int i=0;i<input2-1;i++){
			if(input1[i]>input1[i+1]){
				count++;
				if(k<count){
					k=count;
				}
				if(count==2){
				    seq++;
				}
			}
				else{
					count=1;
				}
			}

            obj.output1= seq;
            obj.output2= k;
            
            return obj;
		} */


/************************************* Most Frequent Occurring (JAVA)***************************************/

	/*public int mostFrequentlyOccurringDigit(int[] input1,int input2){
		// Read only region end
		// Write code here...
		int rem=0;
			int count=0,count1=0,count2=0,count3=0,count4=0,count5=0,count6=0,count7=0,count8=0,count9=0;
			for(int i=0;i<input2;i++) {
				while(input1[i]!=0) {
					rem=input1[i]%10;
					input1[i]/=10;
					
					switch(rem) {
					case 0: count++;
							break;
							
					case 1: count1++;
							break;
							
					case 2: count2++;
							break;
							
					case 3: count3++;
							break;
							
					case 4: count4++;
							break;
							
					case 5: count5++;
							break;
					
					case 6: count6++;
							break;
					
					case 7: count7++;
							break;
					
					case 8: count8++;
							break;
					
					case 9: count9++;
							break;
					default: 
							break;
					}
				}
			}
				Integer arr[]= {count,count1,count2,count3,count4,count5,count6,count7,count8,count9};
				int d=0,max=0;
				for(int i=0;i<10;i++) {
					if(arr[i]>=max) {
						max=arr[i];
						d=i;
					}
				}
				return d;

		
	}
}*/


******************************************Sum_power_dig**************************************
/*int res=0,a=0;
		String s=Integer.toString(input1);
		int ar[]=new int[s.length()];
		for(int i=0;input1!=0;i++){
			a=input1%10;
			ar[i]=a;
			input1/=10;
		}
		for(int i=ar.length-1;i>0;i--){
			res+=(int)Math.pow(ar[i],ar[i-1]);
		}
		res+=(int)Math.pow(ar[0],0);
		return res;*/


************************************Sum_dig_cyclic Order(5+8+2+1+0+9)+(8+..)***************************************


    public int sumOfSumsOfDigits(int input1)
    {
        //Read only region end
        //Write code here
        //throw new NotImplementedException("Method  sumOfSumsOfDigits(int input1) not Implemented.");
       string str= input1.ToString();
	   int sum=0;
       for(int i=0; i< str.Length; i++)
	   {
		   
			   for(int j= i; j< str.Length; j++)
			   {
                  sum += Convert.ToInt32(str[j].ToString());
				   
 			   }
		   
	   }
	return sum;
	}



*********************************************Identify possible_word:(fi_er)  (JAVA)***************************************

/*StringBuffer sb=new StringBuffer();
		String words[]=input2.split(":");
		int pos=input1.indexOf("_");
		for(String s:words){
			if(s.length()==input1.length()){
				if(s.substring(0,pos).equalsIgnoreCase(input1.substring(0,pos))&& s.substring(pos+1,s.length()).equalsIgnoreCase(input1.substring(pos+1,input1.length()))){
				sb.append(s.toUpperCase()+":");
					
				}
			}
		}
		if(sb.length()>0)
			return sb.toString().substring(0,sb.length()-1);
		else
			return "ERROR-009";*/

************************************Encoding_3_String(john johny jonardhan)  (JAVA)*************************************

/* String s1[]=divideString(input1);
	    String s2[]=divideString(input2);
		String s3[]=divideString(input3);
		String in1=s1[0]+s2[0]+s3[0];
		String in2=s1[1]+s2[1]+s3[1];
		String in3=s1[2]+s2[2]+s3[2];
		String fstr=toggleString(in3);
		return new Result(in1,in2,fstr);
	}
	public String[] divideString(String input){
		int rem=input.length()%3;
		int div=input.length()/3;
		String f=null,m=null,l=null;
		if(rem==1){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div+rem);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==2){
			f=input.substring(0,div+1);
			m=input.substring(f.length(),f.length()+div);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==0){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div);
			l=input.substring(f.length()+m.length(),input.length());
		}
		return new String[]{f,m,l};
        
    }
	public String toggleString(String str){
		char ch[]=str.toCharArray();
		String s="";
		for(int i=0;i<ch.length;i++){
			if(Character.isLowerCase(ch[i])){
				s+=Character.toUpperCase(ch[i]);
			}if(Character.isUpperCase(ch[i])){
				s+=Character.toLowerCase(ch[i]);
			}
		}
		return s;
	}*/

/***************************************** Generate Sequence find Nth element *****************************/
		
		/*int arr[]= new int[300];
		arr[0]=input1;
		arr[1]=input2;
		arr[2]=input3;
		int output=0;
		int d1=input2-input1;
		int d2=input3-input2;
		for(int i=3;i<input4;i+=2){
			arr[i]=arr[i-1]+d1;
			arr[i+1]=arr[i]+d2;
		}
		for(int i=0;i<input4;i++){
			if(i==input4-1){
				output=arr[i];
			}
		}
		return output;
		
	}
}

***************************************alternate_add_sub*****************************
/*  int i=0,res1=0,res2=0,res=0;
	   for(i=0;i<input1;i++){
		  if(input2==1){
		   if(i%2==0){
			   res1+=input1-i;
		   }
		   else{
			   res2-=input1-i;
		   }
	   }
		   if(input2==2){
		   if(i==0||i%2!=0){
			   res1+=input1-i;
		   }
		   else{
			   res2-=input1-i;
		   }
	   }  
		   res=res1+res2;
	   }
       return res; */
	   
	   
	   
*******************************************Stable_unstable_passwrd********************************
import java.io.*;
import  java.util.*;

// Read only region start
class UserMainCode
{

	public int findPassword(int input1,int input2,int input3,int input4,int input5){
		// Read only region end
		// Write code here...
		   int res=0;
	int arr[]={input1,input2,input3,input4,input5};
	int sumOfStable=0;
	int sumOfUnstable=0;
	for(int i=0;i<arr.length;i++){
		int input=arr[i];
		boolean status=isStable(input);
		if(status){
			sumOfStable=sumOfStable+input;
			}
		else
		{
			sumOfUnstable=sumOfUnstable+input;
		}
	}
		res=sumOfStable-sumOfUnstable;
		return res;
	}
	public boolean isStable(int input){
		boolean status=false;
		int[] arr=new int[10];
		int temp=0;
		while(input>0){
			int rem=input%10;
		arr[rem]++;
		input/=10;
		}
		int countvalue=0;
		for(int i=0;i<arr.length;i++){
			int value=arr[i];
			if(value!=0 && countvalue==0)
			{
				countvalue=value;
			}
			if(value!=0 && countvalue!=value)
			{
				temp=1;
				break;
			}
		}
		if(temp==0)
		{
			status=true;
			
		}
		return status;
	}
}*/

**************************************************Sum_non_prime**************************************
/*int num=0;
		int sumOfElm=0;
		for(int i=1;i<input2;i++){
			int count=0;
			for(num=i;num>=1;num--){
				if(i%num==0){
					count+=1;
				}
			}
			if(count!=2){
				sumOfElm+=input1[i];
			}
		}
		sumOfElm+=input1[0];
		return sumOfElm;*/


****************************Remove digit to form palindrome*************************************
	public int digitRemove_Palin(int input1){
		// Read only region end
		// Write code here...
		String s=""+input1;
	       
		int len=s.length();
	   int[] a=new int[len];
		for(int i=0;i<len;i++){
			a[i]=Character.getNumericValue(s.charAt(i));
		}
		int output=0;
	   for(int i=0;i<len;i++){
		  if(a[i]==a[len-(i+1)])
			  continue;
		   else{
			   if(a[i]==a[len-(i+2)]){
				   output=a[len-(i+1)];
				   break;
			   }
			   else if(a[i+1]==a[len-(i+1)]){
				   output=a[i];
				   break;
			   }
		   }
		  }
		if(output==0){
			return -1;
		}
		return output;
	}
   }*/

**********************************************Nambiar_no_gen*************************************************
/*int sum=input1.charAt(0)-48;
		int initial=input1.charAt(0)-48;
		String res="";
		for(int i=1;i<input1.length();i++){
			sum+=input1.charAt(i)-48;
			if((sum+initial)%2!=0 && i<input1.length()-1){
				res+=sum;
				initial=input1.charAt(i+1)-48;
				sum=input1.charAt(i+1)-48;
				i++;
			}
            if(i==input1.length()-1){
				res+=sum;
			}
		}
		return Integer.parseInt(res);*/

*********************************************User_id_gen****************************************
/*int len1=input1.length();
		int len2=input2.length();
		String s=""+input3;
		int c=Character.getNumericValue(s.charAt(input4-1));
		int d=Character.getNumericValue(s.charAt(s.length()-input4));
		char sName='a';
		String lName="";
		String str="";
		if(len1>len2){
			sName=input2.charAt(len2-1);
			lName=input1;
		}else if(len2>len1){
			sName=input1.charAt(len1-1);
			lName=input2;
		}else if(len1==len2){
			if(input2.charAt(0)>input1.charAt(0)){
				sName=input1.charAt(len1-1);
			lName=input2;
			}else{
			sName=input2.charAt(len2-1);
			lName=input1;
		}
		}
	String f=String.valueOf(sName)+lName;
		for(int i=0;i<f.length();i++){
			if(Character.isUpperCase(f.charAt(i))){
				str+=String.valueOf(Character.toLowerCase(f.charAt(i)));
			}else{
				str+=String.valueOf(Character.toUpperCase(f.charAt(i)));
			}
		}
		
		return str+c+d;*/

*************************************Jumble_word****************************************
/* publicString JumbleWords(String input1,int input2){
input1=input1.toUpperCase();
String s[]=input1.split(" ");
String output="";
if(input2==1){
for(int i=0;i<s.length();i++){
String word="";
for(int j=0;j<s[i].length();j++){
if(j%2==0)
word+=s[i].charAt(j);
}
for(int j=s[i].length()-1;j>0;j--){
if(j%2!=0)
word+=s[i].charAt(j);
}
output=output+words+" ";
}
}
if(input2==2){
for(int i=0;i<s.length();i++){
String word="";
for(int j=0;j<s[i].length();j++){
if(j%2==0)
word+=s[i].charAt(j);
}
for(int j=0;j<s[i].length();j++){
if(j%2!=0)
word+=s[i].charAt(j);
}
output=output+words+" ";
}
}

return output.trim();
}
}*/ 	


************************************VOWEL print***************************
String s="WIPRO TECHNOLOGIES";
	int input1=0,input2=0;
	String str="",str1="";
	String s1=s.toUpperCase();
	for(int i=0;i<s1.length();i++) {
		char ch=s1.charAt(i);
		if(input1==0) {
			if(ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U') {
				str+=ch;
			}	
			}
		if(input1==1) {
			if(!(ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U')) {
				str+=ch;
			}	
			}
		if(input2==0) {
			str1=str.toUpperCase();
			}
		if(input2==1) {
			str1=str.toLowerCase();
			}
		
			}
	System.out.println(str1);*/


************************************************Same and Different(Matching and nonmatching)****************************
		String input1="tech";
		String input2="TECHNOLOGY";
		String ch="";
		String str="",str1="";
		String s1=input1.toUpperCase();
		String s2=input2.toUpperCase();
		int len1=s1.length();
		int len2=s2.length();
		char arr[]=new char[len2];
		int input3=0;
		
		if(input3==0) {
			for(int i=0;i<len1;i++) {
				ch=Character.toString(s1.charAt(i));
				if(s2.contains(ch))
					str+=ch;
			}
			for(int j=0;j<len2;j++) {
				ch=Character.toString(s2.charAt(j));
				if(s1.contains(ch))
					str1+=ch;
			}
				
			}
		System.out.println(str+" "+str1);*/

*****************************************Ascii PrimeSum( prime char)********************************
public class asciiPrime {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s="NiCita";
		int sum=0;
		String str="";
		String str1="";
		
		
		for(int i=0;i<s.length();i++) {
			char ch=s.charAt(i);
			int n=ch;
			if(n==67||n==71||n==73||n==79||n==83||n==89||n==97||n==101||n==103||n==109||n==113) {
				str+=ch;
				sum+=n;
				
			}
		}
			if(sum>0) {
				str1=str+":"+sum;
			}
			else {
				char c=s.charAt(0);
				char c1=s.charAt(s.length()-1);
				str1=c+":"+c1;
			}
			System.out.println(str1);
	}

	}*/


****************************Longest Odd Sequence****************************

	public int getLen_LS_ODD(int[] input1,int input2){
		int count=0,k=0;
		for(int i=0;i<input2;i++){
			if(input1[i]%2!=0){
				count++;
			
				if(count>k){
					k=count;
				}
			}
		
				else{
					count=0;
				}
			}
		
				if(k==0)
					return -1;
				else
					return k;
			}
		} */



****************************************Traverse array find key(key and next add) *******************************************
public int findKey(int[] input1,int input2){
	boolean flag=true;
	int sum=0;
	int[] k=new int[input2];
	int key=0;
	for(int i=0;i<input2;i++){
		if(input1[i]>0)
		flag=false;
	}
	if(!flag){
		for(int i=0;i<input2;i++){
		if(key<input2){
		if(input1[key]>99 && input1[key]<=999){
		if(input1[key]<0){
			k[i]=(-1)*(input1[key]/100);
		}
		else
			k[i]=input1[key]/100;
		if(input1[key]>0){
		key=input1[key]%100;
		}
		else
			break;
	}
	else{
		if(input1[key]<0){
		k[i]=(-1)*(input1[key]/10);
		}
		else
			k[i]=input1[key]/10;
		if(input1[key]>0){
		key=input1[key]%10;
		}
		else
			break;
		}
	}}}
	else if(flag){
	Arrays.sort(input1);
	sum=input1[input2-1];
	return sum;
	}
	for(int i=0;i<k.length;i++){
		if(i%2==0){
			sum+=k[i];
	}
	else{
		sum-=k[i];
}
}
return sum;
}
}*/


**************************************sum of longest decreasing sequence*********************************
public class SumOfLongestdecreasingSequence {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]={-12,-4,-6,7,8,9,-5,-4,-3,-8};
		int max=0,newsum=0,j=0;
		for(int i=0;i<arr.length;i++)
		{ 
	      if(arr[i]<0)
	{ int  sum=0,count=0;
		for( j=i;j<arr.length;j++)
		{
			if(arr[j]<0)
			{
				sum=sum+arr[j];
				count++;
			}
			else
			{
				break;
			}
		}
		if(count>max)
		{
			max=count;
			newsum=sum;
		}
		else if(count==max)
		{
			newsum+=sum;
		}i=j;
	}
	     
		} System.out.println(newsum);
		if(newsum<0)
		return new sum;
		else
		return-1;
		
	}*/

********************************RSF***********************************
/*public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=987654;
		String str="";
		String s=Integer.toString(n);
		//int l=s.length();
		while(s.length()>0)
		{
			int l=s.length();
			for(int i=0;i<l/2;i++)
			{
				int rem=Math.abs(s.charAt(i)-s.charAt(l-i-1));
				str=str+rem;
				//System.out.println(str);
			}
		   if(l%2!=0)
		   
			   str=str+s.charAt(l/2);
		   
		   
		   if(str.length()==2)
		   
				System.out.println(str);
				s=str;
				str="";
			

		}*/

/*................LOcalisaton...........*/

/*public class Localisation {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
String s="Local";
String st = ""; 
if(s.length()>10){
char ch=s.charAt(0);
int l=s.length()-2;
char ch1=s.charAt(s.length()-1);
st=st+ch+l+ch1;
System.out.println(st);
}
else
{
	System.out.println(s);}

	}

}*/


/*..........odd even zeros............*/

/*package Prime;

public class Noep {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int input1 = 23450;
		String st="";
		String str = "";
		String s = Integer.toString(input1);
		if(input1>0){
			str=str+"p";
		for (int i = 0; i < s.length(); i++)
		{
			if(s.charAt(i)%2==0)
			{
				str=str+"e";
			}
			if(s.charAt(i)%2!=0)
			{
				str=str+"o";
			}
			if(s.charAt(i)=='0')
			{
				str=str+"z";
			}

	} }
		else{
			str=str+"n";
		for (int i = 0; i < s.length(); i++)
		{
			if(s.charAt(i)%2==0)
			{
				str=str+"e";
			}
			if(s.charAt(i)%2!=0)
			{
				str=str+"o";
			}
			if(s.charAt(i)=='0')
			{
				str=str+"z";
			}
		}
		}

		System.out.println(str);
		}*/

/***********************************nextt didgit subtraction(rsf)****************************/
package Prime;

public class Difference {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s=Integer.toString(951623);
		String str="";
		int n=0;
		while(s.length()>0)
		{
			int l=s.length();
		for(int i=0;i<l-1;i++)
		{
			
			int rem=Math.abs(s.charAt(i)-s.charAt(i+1));
			//System.out.println(rem);
			str=str+rem;
		}
		//System.out.println(str);
		
if(str.length()==1)
{ 
	//n=Integer.parseInt(str);
	System.out.println(str);}
	s=str;
	str="";
}


}}


/*******************************Have Anice DAy*******************************/
using System;
				
public class Program
{
	public static void Main()
	{
		
            string s1="Today is a nice day";
            int n=41;
		
           
            string[] s=s1.Split(' ');
		Program p=new Program();
           Console.WriteLine(p.run(s[(n/10)%10-1])+' '+p.run(s[n%10-1]));
           
	}
	public string run(string s){
		if(s.Length%2==0){
					char[] c=(s.Substring(0,(s.Length/2))).ToCharArray();
					Array.Reverse(c);
                    return s.Substring(s.Length/2,s.Length/2).ToString()+new string(c);}
               else {
				   char[] c=(s.Substring(0,((s.Length+1)/2))).ToCharArray();
					Array.Reverse(c);
                   return s.Substring((s.Length-1)/2,(s.Length+1)/2)+new string(c);}
	}
}


/****************************************Person And Token****************************************/


import java.io.*;
import  java.util.*;

// Read only region start
class UserMainCode
{

	public String findSequence(int input1,String[] input2,int[] input3){
		// Read only region end
		// Write code here...
		int var=0;
		int index=0;
		int count=1;
		int arr[]=new int[input1];
		for(int k=0;k<input1;k++)
		arr[k]=input3[k];
		int abc[]=new int[3];
		int flag=0;
		Arrays.sort(arr);
		
		int len=arr.length;
		for(int i=0;i<len;i++) {
			if(i!=len-1) {
				if(arr[i]+1==arr[i+1]) {
					if(var==0) {
						index=i;
						var++;
					}
					count++;
					if(count<3)
						continue;
					else 
						{flag=1;
						break;
						}
				}
			
				else {
					var=0;
					index=0;
					count=1;
					continue;
				}
			}
			}
		
		if(flag==1) {
		for(int i=0;i<input1;i++) {
			if(input3[i]==arr[index]) { 
				abc[0]=i;
				}
			else if(input3[i]==arr[index+1]) {
				abc[1]=i;
			}
			else if(input3[i]==arr[index+2]) {
				abc[2]=i;
			}
			
		}
		
		
		String str= input2[abc[0]]+":"+input2[abc[1]]+":"+input2[abc[2]];
		return str;
		}
		else
		return "NONE";
		
	}
}*/


/*********************************INCREASING EVEN sequence ********************************/


/*public class increasing_even {
	public static void main(String[] args) {
		
	
	int[] input1={9,2,4,6,8,10,11,7,9,2,4,6,8,10};
	int count=1;
	int maxcount=0;
	for(int i=0;i<input1.length-1;i++){
	if((input1[i]%2==0&&input1[i+1]%2==0)&&(input1[i]<input1[i+1]))
	{
	count++;
	}
	else 
	if(count>maxcount)
	{
	maxcount=count;
	count=1;
	}
	}
	if(count>maxcount){
	maxcount=count;
	}
System.out.println(maxcount);
}
}*/


******************************************create pswd_2words_3parts********************************
	/*String s1[]=divideString(input1);
	String s2[]=divideString(input2);
		String pwd=s1[2]+s2[1]+s1[0];
		return pwd;
	}
	public String[] divideString(String input){
		int rem=input.length()%3;
		int div=input.length()/3;
		String f=null,m=null,l=null;
		if(rem==1){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div+1);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==2){
			f=input.substring(0,div);
			m=input.substring(div,div+div+rem);
			l=input.substring(f.length()+m.length(),input.length());
		} if(rem==0){
			f=input.substring(0,div);
			m=input.substring(f.length(),f.length()+div);
			l=input.substring(f.length()+m.length(),input.length());
		}
		return new String[]{f,m,l};*/

*****************************Max_min_product*********************************
i/p1={1,5,6,9};
i/p2=4;
o/p={-72,-36,-27,8};
int max=input1[0];
int a[]=new int[inut2];
for(int i=0;i<input2;i++){
if(max<input1[i]){
max=input1[i];
}}
for(int i=0;i<input2;i++){
input1[i]-=max;
input1[i]*=max;
}
return input1;
}*/

*****************************************sumeetsum(sum of smallest 2dig from given 5 i/p)********************************
int arr[]={input1,input2,input3,input4,input5};
int sum=0;
for(int j=0;j<arr.length;j++){
String s=Integer.toString(arr[j]);
char ar[]=s.toCharArray();
Arrays.sort(ar);
for(int i=0;i<arr.length;i++){
ar[i]=)(char)(ar[i]-48);
}
int x=ar[0]*10+ar[1];
sum+=x;
}
return sum;
}*/


************************************2nd word uppercase**************************************
import java.io.*;
import  java.util.*;

// Read only region start
class UserMainCode
{

	public String secondWordUpperCase(String input1){
		// Read only region end
		// Write code here...
		//String input=input1.trim;
		String word=input1.toUpperCase();
		String str1="";
		String str2="";
		String str3="";
		String[] s=word.split(" ");
		if(s.length>=2){
			return s[1];
		}
		else
			return "LESS";
			}
		
	}*/


**************************************weight of alphabet************************************
import java.io.*;
import  java.util.*;

// Read only region start
class UserMainCode
{

	public int weightOfString(String input1,int input2){
		// Read only region end
		// Write code here...
		String input=input1.toLowerCase();
		int count=0,sum=0;
		if(input2==1){
		for(int i=0;i<input.length();i++){
		char ch=input.charAt(i);
		for(char c='a';c<='z';c++){
			if(ch==' ' || ch=='!')
				continue;
				if(c==ch)
				{
					count++;
					System.out.println(sum);
					sum+=count;
				}
			else{
					count++;
				}
				
			}
			count=0;
			
			
		}}
			else{
				for(int i=0;i<input.length();i++){
		char ch=input.charAt(i);
		if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u' ||ch==' ' || ch=='!')
			{
			continue;
		}
			for(char c='a';c<='z';c++){
				if(c==ch)
				{count++;
					sum+=count;
				}else{
					count++;
				}
				
			}
			count=0;
			
			
		}
				
			}
		
		
		return sum;
		
	}
}*/


public class WeightOfStringMultiply {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a[]={-2,2,1,0,-4,23,65,-6,11,12,25,17,19,20,-21,-9,6,8,
				1,3,2,14,-1,22,24,-1};
		String s="wipro limited";
	//	System.out.println(a.length);
		System.out.println(weightOfString(s,a));

	}
public static int weightOfString(String s,int a[]){
	s=s.toLowerCase();
	int weight=0;
	
	String[] c=s.split(" ");
	int index=0;
	int weightArr[]=new int[c.length];
	for(int i=0;i<c.length;i++){
		weight=0;
		String word=c[i];
		//System.out.println(word);
		//System.out.println("___________");
		int len=word.length();
		
		for(int j=0;j<len;j++){
			char c1=word.charAt(j);
			//System.out.println(c1+" char");
			int num=(int)(c1-96);
		//System.out.println(num+" num");
			int value=a[num-1];
			//System.out.println(value+" the value");
			if(j==0||j==len-1){
				if(value<0){
					value=value+num;
					//System.out.println("negative "+value);
				}
			}
			
				weight=weight+value;
			//System.out.println("the weight  is"+weight);
		}
		
		weightArr[index++]=weight;
	}
	//System.out.print(weightArr.length+" ");

	/*for(int i=0;i<weightArr.length;i++){
		System.out.print(weightArr[i]+" ");
	}*/
	 weight=weightArr[0];
	for(int i=1;i<weightArr.length;i++){
		weight=weight*weightArr[i];
	}
	return weight;
}
}

/************************************Stable unstable MAX MIN AND COUNT********************************************
import java.util.Arrays;

public class StableUnstable2 {
	public static int findpassword(int input1,int input2,int input3,int input4,int input5){
		
		int arr[]={input1,input2,input3,input4,input5};
		int count=0;int c=0;
		int max=0,min=0;
		int index1=0;
		int sumOfStable=0;
		int sumOfUnstable=0,res=0;
		int temp[]=new int[arr.length];
		int temp1[]=new int[arr.length];
		
		int index=0;
		for(int i=0;i<arr.length;i++){
			int input=arr[i];
			boolean status=isStable(input);
			if(status){
				temp[index++]=input;
				Arrays.sort(temp);
				max=temp[arr.length-1];
				//count++;
			
				}
			else
			{
				//c++;
				temp1[index1++]=input;
				
				for( i=0;i<temp1.length;i++){
					min=temp1[0];
					if(temp1[i]<min && temp1[i]!=0){
						min=temp1[i];
						
					}
					
				}
					
				}
		
			
			} 
		      // System.out.println(max+" Max ");
		      //  System.out.println(min+" Min ");
		

		        res=max-min;
			//res=10*count-c;
			return res;
		}
		public static boolean isStable(int input){
			boolean status=false;
			int[] arr=new int[10];
			int temp=0;
			while(input>0){
				int rem=input%10;
			arr[rem]++;
			input/=10;
			}
			int countvalue=0;
			for(int i=0;i<arr.length;i++){
				int value=arr[i];
				if(value!=0 && countvalue==0)
				{
					countvalue=value;
				}
				if(value!=0 && countvalue!=value)
				{
					temp=1;
					break;
				}
			}
			if(temp==0)
			{
				status=true;
				
			}
			return status;
		}


	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
int n1=12,n2=1313,n3=122,n4=678,n5=898;
System.out.println(findpassword(n1, n2, n3, n4, n5));
	}


}
******************************************************Prime sum except min***************************************

public class Mile1_Q1 {
	
static int primeSum(int a[]){
	int flag=0;int k=0;
	int temp[]=new int[a.length];
	for(int i=0;i<a.length;i++){
		flag=0;
		for(int j=2;j<a.length/2;j++){
			if(a[i]%j==0){
				flag=1;
				break;
			}
		}
		if(flag==0 && temp[i]!=1){
			temp[k++]=a[i];
		}
	}
	for(int i=0;i<temp.length;i++){
	
		System.out.print(temp[i]+" ");
	}
	

	int min=Integer.MAX_VALUE;
	int sum=0;
	for(int i=0;i<temp.length;i++){
		sum+=temp[i];
		if(temp[i]<min && temp[i]!=0){
			min=temp[i];
		}
	}
	sum-=min;
	return sum;
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a[]={10,29,31,59,63,12,23,41,43};
		int n=a.length;
		System.out.println(primeSum(a));
	}

}


****************************************sumeet sum****************************************




import java.io.*;
import  java.util.*;


class UserMainCode
{
public int findSumeetSum(int input1,int input2,int input3){
		int d = 0;
		int sum=0;
		int max1=0,max2=0;
		while(input1!=0)
		{
			d=input1%10;
			if(d>max1){
				max2=max1;
				max1=d;
				
			}
			else if(d>max2){
				max2=d;
			}
			input1=input1/10;
			}
		sum=sum+(max1*10)+max2;
		
		System.out.println(max1+" "+max2 + " "+sum);
		max1=0;
		max2=0;
	d=0;
		while(input2!=0)
		{
		d=input2%10;
		if(d>max1){
			max2=max1;
			max1=d;}
		else if(d>max2){
			max2=d;
		}
		input2=input2/10;
		}
		
           sum=sum+(max1*10)+max2;
      System.out.println(max1+" "+max2 + " "+sum);
		max1=0;
		max2=0;
		while(input3!=0)
		{
			d=input3%10;
			if(d>max1){
				max2=max1;
				max1=d;
				
			}
			else if(d>max2){
				max2=d;
			}
			input3=input3/10;
			
		}
sum=sum+(max1*10)+max2;
System.out.println(max1+" "+max2 + " "+sum);     
		max1=0;
		max2=0;
		
		return sum;
}
}
public class UserMain
{
public static void main(String[] args)
	{
	int n1=26674;
	int n2=105;
	int n3=37943;
	int a;
	UserMainCode abc=new UserMainCode();
  int r=abc.findSumeetSum(n1,n2,n3);
		System.out.println(r);
	}
}

*****************************************alpha beta gamma***********************************************



import java.util.Arrays;

public class Alpha_Beta_gama {
	public static int weightofalphabetagama(int n1,int n2,int n3,String n4){
		int a[]=new int[(n1+"").length()];
		int b[]=new int[(n2+"").length()];
		int c[]=new int[(n3+"").length()];
		int i=0,j=0,k=0;
		int c1=0;
		while(n1!=0){
			a[i++]=n1%10;
			n1/=10;
		}
		Arrays.sort(a);
		while(n2!=0){
			b[j++]=n2%10;
			n2/=10;
		}
		Arrays.sort(b);

		while(n3!=0){
			c[k++]=n3%10;
			n3/=10;
		}
	    Arrays.sort(c);
	    n4=n4.toUpperCase();
	    for(i=0;i<n4.length();i++){
	    	char ch=n4.charAt(i);
	    	//if(ch>=97 && ch<=122){
	    		//System.out.println((int)n4.charAt(i));
	    	if(ch=='A'||ch=='E'||ch=='I'||ch=='O'||ch=='U') {
	    		c1++;
	    	}
	    	
	    }
	    int pin=a[3]*b[2]*c[0]+c1;
	    System.out.println(a[3]+" "+b[2]+" "+c[0]+" "+c1);
	    return pin;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
int n1=9865;
int n2=7654;
int n3=9812;
String s="JeeyA";
System.out.println(weightofalphabetagama(n1,n2,n3,s));
	}

}

/***********************************GET CODE THRU STRINGS*/
 public int getCodeThroughStrings(string input1)
    {
        //Read only region end
        //Write code here
		
		String[] a = input1.Split(' ');  
		int[] b= new int[10];
		int sum=0;
		int sum1=0;
		for(int i=0; i<a.Length; i++){
			b[i]= a[i].Length;
		}	
		
		for(int i=0; i<a.Length; i++){
			sum= sum+ b[i];
		}
		
		while(sum!=0){
			int rem= sum%10;
			sum1= sum1+rem;
			sum= sum/10;
		}
		
        return sum1;
    }


/*********************************** ADDITION USING STRINGS **************************************/

 public static void Main(string[] args)
        {
            string n1 = "34";
            string n2 = "36";
            string answer = "";
            
            string n1Rev = StringReverse(n1), n2Rev = StringReverse(n2);
            int maxLen = n1Rev.Length > n2Rev.Length ? n1Rev.Length : n2Rev.Length;
            
            for (int i = 0, carry = 0; i <= maxLen; i++) {
                char c1 = i >= n1Rev.Length ? '0' : n1Rev[i];
                char c2 = i >= n2Rev.Length ? '0' : n2Rev[i];

                int sum = int.Parse("" + c1) + int.Parse("" + c2) + carry;
                
                carry = sum > 9 ? 1 : 0;
                answer += sum > 9 ? sum % 10 : sum;
            }
            Console.WriteLine("{0} + {1} = {2}", n1, n2, StringReverse(answer));
        }
        public static string StringReverse(string s) {
            var chars = s.ToCharArray();
            Array.Reverse(chars);
            return new string(chars);
        }



/************************************************MOST FREQUENT DIGIT**************************************/
public int MostFrequentDigit(int input1,int input2,int input3,int input4)
    {
        //Read only region end
        //Write code here       

 int[] a= new int[10]{0,0,0,0,0,0,0,0,0,0};
 int max,i, r=0;

		
		while(input1!=0){
  a[input1%10]++;
    input1=input1/10;
		} 
		
		while(input2!=0){
         a[input2%10]++;
    input2=input2/10; 
		}
        
		while(input3!=0){
         a[input3%10]++;
    input3=input3/10;
       }
        
		while(input4!=0){
         a[input4%10]++;
    input4=input4/10;
		}
      

    max=a[0];
 
for( i=1;i<10;i++){
     if(max<=a[i]){
     max=a[i];
     }
}
    for( i=0;i<10;i++){
        if(max==a[i]){
r=i;
            

        }
        
}

 
 return r;
    }


************************Most frequent digit*******************

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int MostFrequentDigit(int input1,int input2,int input3,int input4)
    {
        //Read only region end
        //Write code here
        //Write code here
        int[] a=new int[10];
		do{
			a[input1%10]++;
			input1/=10;
		}while(input1>0);
		do{
			a[input2%10]++;
			input2/=10;
		}while(input2>0);
		do{
			a[input3%10]++;
			input3/=10;
		}while(input3>0);
		do{
			a[input4%10]++;
			input4/=10;
		}while(input4>0);
		int l=a[0],k=0;
		for(int i=0;i<10;i++){
			
			if(l<a[i]){
				l=a[i];
				k=i;
			}
			else if(l==a[i])
		
			{
				if(k<i)
					k=i;
			}}
		return k;
    }
}


/********************************************************* SUM OF POWER DIGIT**********************************/

 double sum=0;
            double r;
		String s=input1.ToString();
		
		for(int i=0;i<s.Length;i++){
            if(i!=s.Length-1){
             double a= Convert.ToDouble(""+s[i]);
                double b= Convert.ToDouble(""+s[i+1]);
                r= Math.Pow(a,b);
                    
			sum=sum+r;
              
            }
			else
				sum= sum+(Math.Pow(s[i],0));
           
		}
		
		int x= Convert.ToInt32(sum);
		return x;


/*******************************************ROMAN NUMBER ********************************/

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
  
  public string FindMessage(string input1)
    {
        //Read only region end
        //Write code here
        //throw new NotImplementedException("Method  FindMessage(string input1) not Implemented.");
        string[] str= input1.Split(' ');
		
		string s= null;
		for(int i=0 ;i<str.Length; i++)
		{
			int res=0;
			for(int j=0; j< str[i].Length; j++)
			{
				
				
				int s1= value(str[i][j]);
				if(j+1 < str[i].Length)
			{
				int s2= value(str[i][j+1]);				
			
			
				if(s1 >= s2)
					res= res+ s1;
				else 
				{
					res= res+ s2 - s1;
					j++;
				}
			
			  
			}
				 else
			   {			
				res= res+ s1;
				
			}
				
	       }
			s=s+(Convert.ToChar(res)).ToString();
			
	}
	
	return s;
	
	}

	
 public int value(char r) 
   { 
    if (r == 'I') 
        return 1; 
    if (r == 'V') 
        return 5; 
    if (r == 'X') 
        return 10; 
    if (r == 'L') 
        return 50; 
    if (r == 'C') 
        return 100; 
    if (r == 'D') 
        return 500; 
    if (r == 'M') 
        return 1000; 
    return -1; 
  } 
}


/**************************************STEP NUMBER ****************************************/
    public Boolean StepNumber(int input1)
    {
        //Read only region end
        //Write code here
        //throw new NotImplementedException("Method  StepNumber(int input1) not Implemented.");
        string s= input1.ToString();
		int count=0;
		int t= s.Length-1;
		for(int i=0;i< s.Length; i++){
			if(i+1< s.Length){
				if((Math.Abs(s[i]- s[i+1]))==0 ||  (Math.Abs(s[i]- s[i+1]))==1)
					count++;
				else
					break;
			}
		}
		
		if(t==count)
			return true;
		else
			return false;
	}
}


/*************************************Encode Strings (John, Johny, Jhohardan)*******************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MettlMileStone2
{
    class EncodeStrings
    {
        string input1 = "John";
        string input2 = "Johny";
        string input3 = "Jhohardan";
        public void encode() {
            string output1 = mul(input1);
            string output2 = mul(input2);
            string output3 = mul(input3);

            Console.WriteLine(output1);
            Console.WriteLine(output2);
            Console.WriteLine(output3);
        }
        public string mul(string input) {
            string str = "";
            string first = "";
            string mid = "";
            string last = "";

            int len = input.Length;
            if (input.Length % 3 == 0) {
                int ele = input.Length / 3;
                first += input.Substring(0,ele);
                mid += input.Substring(ele,ele);
                last += input.Substring(ele+ele,ele);      
            }
            if (input.Length % 3 == 1) {
                int ele = input.Length / 3;
                first += input.Substring(0,ele);
                mid += input.Substring(ele,ele+1);
                last += input.Substring(ele+1,ele);
            }
            if (input.Length % 3 == 2) {
                int ele = input.Length / 3;
                first += input.Substring(0,ele+1);
                mid += input.Substring(ele+1, ele);
                last += input.Substring(ele+ele,ele+1);
            }
            str = first +":"+ mid +":"+ last;
            return str;
        }
    }
}


/****************************Non Reapeated Digit count********************************8*/

  int c = 0;
            int[] a = new int[10] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            while (input1 != 0)
            {
                int r = input1 % 10;
                a[r]++;
               
                input1 = input1 / 10;
            }
            for(int i = 0; i < a.Length; i++)
            {
                if (a[i]==1)
                    c++;
            }
	return c;



/*************************************WEIGHT OF STRING ********************************/

    public int weightOfString(string input1,int input2)
    {
        //Read only region end
        //Write code here
       // throw new NotImplementedException("Method  weightOfString(string input1,int input2) not Implemented.");
      string alpha= "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	   input1= input1.ToUpper();
	 string[] str=  input1.Split(' ');
		int sum=0;
		
		for(int i=0 ; i< str.Length; i++)
		{
			for(int j=0; j < str[i].Length; j++)
			{
				int s1=alpha.IndexOf(str[i][j])+1;
				if(input2==0)
				{
					if(s1==1 || s1==5 ||s1==9 || s1==15 || s1==21)
					{
						continue;
					}
					else
						sum += s1;
						
				}
				else
				{
					sum += s1;
				}
			}
		}
	
	
	
	
	return sum;
	
	
	}



/*************************************************IsLetter or IsDigit****************************************8/


    public string StringStatistics(string input1)
    {
        //Read only region end
        //Write code here
        //throw new NotImplementedException("Method  StringStatistics(string input1) not Implemented.");
       string str= null;
		int sum=0, c=0;
		
		
		
		for(int i=0; i< input1.Length; i++)
		{		
			char b= input1[i];
			if(Char.IsLetter(b))
			{
			 str =String.Concat(str,b.ToString());	
				c++;
			}
 			else
				sum  += Convert.ToInt32(input1[i].ToString());

	  }
		
		if(string.IsNullOrEmpty(str) || sum==0)
			return "ZERO";
		
		return (c.ToString()+ str+ sum.ToString());
}



******************************** fORWARD STRING**********************


     string[] str= input1.Split(' ');
     string s=null;
     char z= 'z';
     char Zz= 'Z';
                  
            for(int i=0; i < str.Length; i++)
            {
                for(int j= 0; j< str[i].Length; j++)
                {
                   int t= Convert.ToInt32(str[i][j])+ Convert.ToInt32(str[i].Length);
                      if(t > 90 && t <= 97)
                       s=s+ Zz.ToString() ;  
                    else if(t > 122)
                    
                           s=s+ z.ToString() ;
                   else
                      s=s+ (Convert.ToChar(t)).ToString();
                   
                }
                if(i < str.Length)
                   s= s+ " ";

            }
            
            
            return s;


****************************** Find Average*******************************
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public double FindAverage(int input1)
    {
        //Read only region end
        //Write code here
       
		int sum=0,k=0;
        while(input1>0){
			sum=sum+input1%10;
			k++;
			input1/=10;
		}
		float i=(float)sum/(float)k;
		string s=i.ToString();
		string m="";
		int n=0,x=0;
		foreach(char c in s){
			if(c=='.'||n!=0)
				n++;
			if(n==3){
				x=int.Parse(c.ToString());
			}
			else if(n==4){
				if(int.Parse(c.ToString())>4)
					x=x+1;
				m=m+x;
				break;
			}
			else{
			m+=c;
			}
		}
		Console.WriteLine(sum+" "+k+" "+m);
		return double.Parse(m);
    
    }
}

******************************* Least Frequent Digit**********************************





******************************Find number of occurences*******************************
using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public int FindNumberOfOccurrence(int input1,int input2)
    {
        //Read only region end
        //Write code here
		int k=0;
        for(int i=0;i<=input2;i++){
			int j=i;
			while(j>0){
				if(j%10==input1)
					k++;
				j/=10;
			}
		}
		return k;
    }
}




********************** Reverse words and case*************************
public class UserMainCode
{
    public string reverseWordsandCase(string input1,int input2)
    {
        //Read only region end
        //Write code here
       if(input2==0){
		   string s="",s1="";
		   foreach(char c in input1){
			   if(c==' '){
				   s=s+s1+' ';
				   s1="";
			   }
			   else{
				   s1=c+s1;
			   }
		   }
		   s+=s1;
		   return s;
		   
	   }
		else {
			
			 string s="",s1="";
		   foreach(char c in input1){
			   if(c==' '){
				   char[] i=s1.ToCharArray();
				   Console.WriteLine(s.ToCharArray());
				   if((int)i[0]>64&&(int)i[0]<=122)
				   i[0]=char.ToUpper(i[0]);
				   else{
					   i[s1.Length-1]=char.ToUpper(i[s1.Length-1]);
				   }
				
				   s=s+new string(i)+' ';
				   s1="";
			   }
			   else{
				   s1=char.ToLower(c)+s1;
			   }
		   }
		 char[] j=s1.ToCharArray();
				   if((int)j[0]>64&&(int)j[0]<=122)
				   j[0]=char.ToUpper(j[0]);
				   else{
					   j[s1.Length-1]=char.ToUpper(j[s1.Length-1]);
				   }
				   s=s+new string(j);
		   return s;
		}
    }
}


*****************************Find  String*****************************

public string FindString(string input1)
    {
        //Read only region end
        //Write code here
       string[] s=new string[10];
		int k=0;
		foreach(char c in input1){
			if(c==' '){
				k++;
			}
			else{
				s[k]+=c;
			}
		}
		string s1="";
		for(int i=0;i<=k;i++){
			foreach(char c in s[i]){
				if((int)c+s[i].Length>90&&char.IsUpper(c))
					s1+=(char)90;
				else if((int)c+s[i].Length>122&&char.IsLower(c))
					s1+=(char)122;
				else
				s1+=(char)((int)c+s[i].Length);
			}
			if(i!=k)
			s1+=' ';
		}
		return s1;
    }


****************************** Find Message********************************

public string FindMessage(string input1)
    {
        //Read only region end
        //Write code here
                                        int k=0;
                                string[] s=new string[100];
                                foreach(char i in input1){
                                                if(i==' '){
                                                                k++;
                                                }
                                                else{
                                                                s[k]+=i;
                                                }
                                }
                                string m="";
                                for(int i=0;i<=k;i++){
                                                m+=(char)num(s[i]);
                                }
                                return m;
    }
                public int num(string s){
                                int sum =0,k=0,n=0;
                                for (int i=s.Length-1;i>=0;i--){
                                                switch(s[i]){
                                                                case 'I':
                                                                                k=1;
                                                                                break;
                                                                case 'V':
                                                                                k=5;
                                                                                break;
                                                                case 'X':
                                                                                k=10;
                                                                                break;
                                                                case 'L':
                                                                                k=50;
                                                                                break;
                                                                case 'C':
                                                                                k=100;
                                                                                break;
                                                                default:
                                                                    Console.WriteLine(sum);
                                                                                break;
                                                                                
                                                }
                                                if(i==s.Length-1){
                                                                sum=sum+k;
                                                                n=k;
                                                                continue;
                                                }
                                                if(n>k){
                                                                sum=sum-k;
                                                }
                                                else 
                                                                sum=sum+k;
                                                n=k;
                                }
                                
                                return sum;
                }
				
				
******************************************** Find number of images******************************
public int findNumberOfImages(int[] input1,char[] input2)
    {
        //Read only region end
        //Write code here
        int sum=0;
		for(int i=0;i<input1[0];i++){
			if(input2[i]=='h'){
				if(sum>=input1[3]||input1[2]>=input1[3]){
					return i;
				}
				sum=sum+input1[2];
				if(sum>=input1[3]){
					return i;
				}
				sum=sum+1;
			}
			else if(input2[i]=='v'){
				if(sum>=input1[3]){
					return i;
				}
				sum=sum+1;
			}
		
			sum=sum+input1[1];
		}
		return input1[3];
}


 ************************************FIND MIN DAYS****************************
 public int FindMinDays(int input1,string input2)
    {
        //Read only region end
        //Write code here
        int[] a=new int[12];
		int k=0;
string s="";
		foreach(char i in input2){
				if(i==' '){
				a[k++]=int.Parse(s);
				s="";
			}
			else{
				s+=i;
			}
		}
		a[k++]=int.Parse(s);
		if(input1==0)
			return 0;
		int sum=0,j=0;
		while(sum<input1){
			if(a.Max()==0)
				return -1;
			sum=sum+a[maxi(a)];
			a[maxi(a)]=0;
			j++;
			
		}
		
		return j;
    }
	public int maxi(int[] a){
		int k=a[0],j=0;
		for(int i=1;i<12;i++){
			if(k<a[i]){
				k=a[i];
				j=i;
			}
		}
		return j;
	}


*****************************FIND SUM DIGIT*************************************
 public int[] FindSumDigit(int input1,int input2)
    {
        //Read only region end
       
   string num=input1.ToString();
		int sum=0;
		foreach(char i in num){
			sum=sum+int.Parse(i.ToString());
		}
		if(sum==input2){
			int[] a=new int[]{int.Parse(num)};
			return a;
		}
		else if(sum<input2){
			int[] a=new int[]{0};
			return a;
		}
		int[] b=new int[10];
		string k="";
		foreach(char i in num){
			if(num.IndexOf(i)==0){
				k=k+i;
			}
			else{
				
			}
		}

}



************************************* STRING STATISTICS*************************************
 public string StringStatistics(string input1)
    {
        //Read only region end
        //Write code here
string s="";
		int k=0;
		int sum=0;
		int m=0;
		foreach(char i in input1){
			if((int)i>=48&&(int)i<=57){
				m++;
				sum=sum+int.Parse(i.ToString());
			}
			if((int)i>=65&&(int)i<=122){
		k++;
				s+=i;
			}
		}
		if(m==0||k==0)
			return "ZERO";
		return k+s+sum;
         }
		 
		 
*******************************Process of two words*****************************************
using System;
				
public class Program
{
	public static void Main()
	{
		
            string s1="Today is a nice day";
            int n=41;
		
           
            string[] s=s1.Split(' ');
		Program p=new Program();
           Console.WriteLine(p.run(s[(n/10)%10-1])+' '+p.run(s[n%10-1]));
           
	}
	public string run(string s){
		if(s.Length%2==0){
					char[] c=(s.Substring(0,(s.Length/2))).ToCharArray();
					Array.Reverse(c);
                    return s.Substring(s.Length/2,s.Length/2).ToString()+new string(c);}
               else {
				   char[] c=(s.Substring(0,((s.Length+1)/2))).ToCharArray();
					Array.Reverse(c);
                   return s.Substring((s.Length-1)/2,(s.Length+1)/2)+new string(c);}
	}
}



***************************************RCF ************************************

 int input1 = 13;
            // converting to string
            string str = input1.ToString();
            string num = string.Empty;
            int diff = 0;
            int x, y;
            // operation
            while(num.Length != 1){
                num = null;
                // operation main
                for(int i = 0; i < str.Length - 1; i++){
                    int.TryParse(str[i].ToString(), out x);
                    int.TryParse(str[i+1].ToString(), out y);
                    diff = x - y;
                    if(diff < 0)
                        diff *= -1;
                    num += diff.ToString();
                }
                str = null;
                str = num;
            }

            Console.WriteLine(num);

**************** MIN MAX MINUS************************

//max and min only  < will be replaced by >in if condition
/Your code goes here
            //Console.WriteLine("Hello, world!");
            int[] arr = new int[]{2,7,5,9,4};
            //to find max num
            int max=arr[0];
            for(int i=0;i<arr.Length;i++)
            {
                if(max<arr[i])
                {
                    max=arr[i];
                }
            }
            Console.WriteLine(max);
            for(int i=0;i<arr.Length;i++)
            {
                //add max with array element then multiply each element with max
                arr[i]=(arr[i]+max)*max;
                Console.WriteLine(arr[i]);
                
                
            }
            //in mettl we have to return array
            //retrun arr;
			
			
****************************