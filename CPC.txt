//----------------------------PROJECT------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectManagement
{
    public class ProjectUtility
    {
        public string GenerateProjectID(string strProjectName)
        {
            string id = "";
            int count = 0;
            string[] s = strProjectName.Split(' ');
            foreach(string k in s)
            {
                count++;
            }

            if(count==1)
            {
                id = s[0].Substring(0, 3);
                id = id.ToUpper();
            }
            if(count==2)
            {
                id = s[0].Substring(0, 1) + s[1].Substring(0,2);
                id = id.ToUpper();

            }
            if(count==3)
            {
                id = s[0].Substring(0, 1) + s[1].Substring(0, 1) + s[2].Substring(0, 1);
                id = id.ToUpper();
            }

            return id;
            //throw new NotImplementedException();
        }
    }
}

***************************************************************************************************************************************************************

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectManagement
{
    public class ProjectData
    {
        const string ConnectionString = "Server=.;Initial Catalog=ProjectManagement;User ID=sa;Password=wipro@123";
        public string AddProject(Project obj)
        {
            if (obj == null)
                return null;
            else
            {
                /*ProjectUtility pu = new ProjectUtility();
                string pid = "";
                pid = pu.GenerateProjectID(obj.ProjectName);
                Random rand = new Random();
                int random = rand.Next(100, 1000);
                pid = pid + random.ToString();
                obj.ProjectID = pid;
                int duration = (obj.StartDate - obj.EndDate).Days;
                obj.Duration = duration;

                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand("Insert into Projects(ProjectID,ProjectName,StartDate,EndDate,Duration) values(@pid,@pn,@sd,@ed,@dur)", con);
                cmd.Parameters.AddWithValue("@pid", obj.ProjectID);
                cmd.Parameters.AddWithValue("@pn", obj.ProjectName);
                cmd.Parameters.AddWithValue("@sd", obj.StartDate);
                cmd.Parameters.AddWithValue("@ed", obj.EndDate);
                cmd.Parameters.AddWithValue("@dur", obj.Duration);
                con.Open();
                int row = cmd.ExecuteNonQuery();
                con.Close();
                if(row>1)
                {
                    return obj.ProjectID;
                }
                else
                {
                    return null;
                }
                */

                ProjectUtility pu = new ProjectUtility();
                string id = pu.GenerateProjectID(obj.ProjectName);
                Random r = new Random();
                id += r.Next(100, 1000);
                obj.ProjectID = id;
                int d = (obj.StartDate - obj.EndDate).Days;
                obj.Duration = d;
                string ap = "INSERT INTO PROJECTS VALUES ('" + obj.ProjectID + "','" + obj.ProjectName + "','" + obj.StartDate + "','" + obj.EndDate + "','" + obj.Duration + "')";
                SqlConnection con = new SqlConnection(ConnectionString);
                con.Open();
                SqlCommand cmd = new SqlCommand(ap, con);
                int i = cmd.ExecuteNonQuery();
                con.Close();
                if (i > 0)
                    return obj.ProjectID;
                else
                    return null;
            }
        



    


    // throw new NotImplementedException();
}

        public Project GetProjctByID(string strProjectID)
        {
            
            //throw new NotImplementedException();
            
            if (strProjectID == null || string.IsNullOrEmpty(strProjectID))
            {
                return null;
            }
            else
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand("Select * from Projects where ProjectID=@PID", con);
              
                cmd.Parameters.AddWithValue("@PID", strProjectID);
                con.Open();
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    dr.Read();
                    Project p = new Project();
                    p.ProjectID = dr["ProjectID"].ToString();
                    p.ProjectName = dr["ProjectName"].ToString();
                    p.StartDate = DateTime.Parse(dr["StartDate"].ToString());
                    p.EndDate = DateTime.Parse(dr["EndDate"].ToString());
                    p.Duration = int.Parse(dr["Duration"].ToString());
                    con.Close();
                    return p;
                    
                }
                else
                {
                    return null;
                    
                }
               
            }

        }

        public int UpdateProject(Project obj)
        {
            //throw new NotImplementedException();
            if(obj==null)
            {
                return -1;
            }
            else
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand("Update Projects set ProjectID=@pid,ProjectName=@pn,StartDate=@sd,EndDate=@ed,Duration=@dur", con);
                cmd.Parameters.AddWithValue("@pid", obj.ProjectID);
                cmd.Parameters.AddWithValue("@pn", obj.ProjectName);
                cmd.Parameters.AddWithValue("@sd", obj.StartDate);
                cmd.Parameters.AddWithValue("@ed", obj.EndDate);
                cmd.Parameters.AddWithValue("@dur", obj.Duration);
                con.Open();
                int row = cmd.ExecuteNonQuery();
                con.Close();
                if(row>0)
                {
                    return row;
                }
                else
                {
                    return 0;
                }

            }




        }

        public int DeleteProject(string strProjectID)
        {
            // throw new NotImplementedException();
            if (strProjectID == null || string.IsNullOrEmpty(strProjectID))
            {
                return -1;
            }
            else
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand("Delete from Projects where ProjectID=@pid", con);
                cmd.Parameters.AddWithValue("@pid", strProjectID);
                con.Open();
                int row = cmd.ExecuteNonQuery();
                con.Close();
                if (row > 0)
                {
                    return row;
                }
                else
                {
                    return 0;
                }

            }
        }
    }
}


*****************************************************************************************************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectManagement
{
    public class Project
    {
        // TODO: Write your code here.
        public string ProjectID { get; set; }

        public string ProjectName { get; set; }

        public DateTime  StartDate { get; set; }

       public int Duration { get; set; }

       public DateTime EndDate { get; set; }

        public Project()
        {

        }
    }
}


****************************************************************************************************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectManagement
{
    public class Project
    {
        // TODO: Write your code here.
        public string ProjectID { get; set; }

        public string ProjectName { get; set; }

        public DateTime  StartDate { get; set; }

       public int Duration { get; set; }

       public DateTime EndDate { get; set; }

        public Project()
        {

        }
    }
}


//-------------------------------PRODUCT----------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
namespace InventoryManagementSystem
{
    public class Product
    {
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public string Description { get; set; }
        public int Quantity { get; set; }
        public int UnitPrice { get; set; }

        string ConnectionString = "Data Source=.;Initial Catalog=ProductsDB;User ID=sa;Password=wipro@123";

        public bool ADDProduct(Product obj)
        {
            bool is_added = false;
            SqlConnection con = new SqlConnection(ConnectionString);
            SqlCommand cmd = new SqlCommand("insert into Products(ProductName,Description,AvailableQuantity,UnitPrice)values(@pname,@descp,@quant,@up)", con);
            cmd.Parameters.AddWithValue("pname", obj.ProductName);
            cmd.Parameters.AddWithValue("descp", obj.Description);
            cmd.Parameters.AddWithValue("quant", obj.Quantity);
            cmd.Parameters.AddWithValue("up", obj.UnitPrice);
            con.Open();
            int row = cmd.ExecuteNonQuery();
            con.Close();
            if (row > 0)
            {
                is_added = true;
            }
            else is_added = false;
            return is_added;
        }


        public bool ModifyProduct(Product obj)
        {
            bool is_modified = false;
            SqlConnection con = new SqlConnection(ConnectionString);
            SqlCommand cmd = new SqlCommand("update Products set ProductName=@pname,Description=@descp,AvailableQuantity=@quant,UnitPrice=@up where ProductID=@pid", con);
            cmd.Parameters.AddWithValue("pname", obj.ProductName);
            cmd.Parameters.AddWithValue("descp", obj.Description);
            cmd.Parameters.AddWithValue("quant", obj.Quantity);
            cmd.Parameters.AddWithValue("up", obj.UnitPrice);
            cmd.Parameters.AddWithValue("@pid", obj.ProductID);
            con.Open();
            int row = cmd.ExecuteNonQuery();
            con.Close();
            if (row ==1)
            {
                is_modified = true;
            }
            else is_modified = false;
            return is_modified;
        }

        public bool DeleteProduct(int productID)
        {

            bool is_modified = false;
            SqlConnection con = new SqlConnection(ConnectionString);
            SqlCommand cmd = new SqlCommand("delete from products where ProductID=@pid", con);
            
            cmd.Parameters.AddWithValue("@pid",productID);
            con.Open();
            int row = cmd.ExecuteNonQuery();
            con.Close();
            if (row == 1)
            {
                is_modified = true;
            }
            else is_modified = false;
            return is_modified;
        }


        public Product ViewProduct(int productID)
        {
            Product p = null;
            SqlConnection con = new SqlConnection(ConnectionString);
            SqlCommand cmd = new SqlCommand("select * from products where ProductID=@pid", con);
            cmd.Parameters.AddWithValue("@pid", productID);
            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            if(dr.HasRows)
            {
                dr.Read();
                p.ProductName = dr["ProductName"].ToString();
                p.Quantity = int.Parse(dr["Quantity"].ToString());
                p.Description= dr["Description"].ToString();
                p.UnitPrice = int.Parse(dr["UnitPrice"].ToString());
               
            }
            return p;

        }


        public List<Product> ViewAllProducts()
        {
            Product p = new Product();
            List<Product> prod = new List<Product>();
            SqlConnection con = new SqlConnection(ConnectionString);
            SqlCommand cmd = new SqlCommand("select * from products ", con);
            con.Open();
            SqlDataReader dr = cmd.ExecuteReader();
            if (dr.HasRows)
            {
                dr.Read();
                
                    p.ProductID = int.Parse(dr["ProductID"].ToString());
                    p.ProductName = dr["ProductName"].ToString();
                   // p.Quantity = int.Parse(dr["Quantity"].ToString());
                    //p.Description = dr["Description"].ToString();
                    p.UnitPrice = int.Parse(dr["UnitPrice"].ToString());
                    prod.Add(p);
            }
            con.Close();
            return prod;
        }
    }
}
//-----------------------------------Assest Management--------------------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssetManagement
{
    public class AssetTracking
    {
        const string ConnectionString = "Data Source=.;Initial Catalog=AssetManagement;User ID=sa;Password=wipro@123";
        public bool AddAsset(Asset obj)
        {
            bool Isadded = false;
            //throw new NotImplementedException();
            if (obj != null)
            {
                string s = null;
                Random rand = new Random();
                int i = rand.Next(1, 1000);

                s += obj.AssetType[0].ToString() + obj.AssetType[1].ToString() + i.ToString();
                obj.SerialNo = s;

                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "insert into Asset values(@at,@sn,@pd,@ts)";
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("@at", obj.AssetType);
                cmd.Parameters.AddWithValue("@sn", obj.SerialNo);
                cmd.Parameters.AddWithValue("@pd", DateTime.Now);
                cmd.Parameters.AddWithValue("@ts", "FREE POOL");
                con.Open();
                int rowcount = cmd.ExecuteNonQuery();
                con.Close();
                if (rowcount == 1)
                {
                    Isadded = true;
                }
                else
                {
                    Isadded = false;
                }
            }
            else
            {
                Isadded = false;
            }
            return Isadded;
        }

        public bool ModifyAsset(Asset obj)
        {
            bool Ismodify = false;
            //  throw new NotImplementedException();
            if (obj != null)
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "update Asset set SerialNo=@sn,AssetType=@at,ProcurementDate=@pd where AssetID=@aid";
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("@sn", obj.SerialNo);
                cmd.Parameters.AddWithValue("@at", obj.AssetType);
                cmd.Parameters.AddWithValue("@pd", DateTime.Now);
                cmd.Parameters.AddWithValue("@aid", obj.AssetID);
                con.Open();
                int rowcount = cmd.ExecuteNonQuery();
                con.Close();
                if (rowcount == 1)
                {
                    Ismodify = true;
                }
                else
                {
                    Ismodify = false;
                }
            }
            else
            {
                Ismodify = false;
            }
            return Ismodify;
        }

        public bool TagAsset(AssetTagging obj)
        {
            bool IsTagged = false;
            string status = "";

            if (obj != null)
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "select TaggingStatus from Asset where AssetId=@aid";
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("@aid", obj.AssetID);
                con.Open();
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    dr.Read();
                    status = dr["TaggingStatus"].ToString().ToUpper();
                    if (status == "FREE POOL")
                    {
                        SqlConnection con1 = new SqlConnection(ConnectionString);
                        SqlCommand cmd1 = new SqlCommand();
                        cmd1.CommandText = "Insert into AssetTagging values(@eid,@aid,@td,null)";
                        cmd1.Connection = con1;
                        cmd1.Parameters.AddWithValue("@aid", obj.AssetID);
                        cmd1.Parameters.AddWithValue("@eid", obj.EmployeeID);
                        cmd1.Parameters.AddWithValue("@td", DateTime.Now);
                        con1.Open();
                        int rows = cmd1.ExecuteNonQuery();
                        con1.Close();
                        if (rows > 0)
                        {
                            SqlConnection con2 = new SqlConnection(ConnectionString);
                            SqlCommand cmd2 = new SqlCommand();
                            cmd2.CommandText = "update Asset set TaggingStatus=@ts where AssetID=@aid";
                            cmd2.Connection = con2;
                            cmd2.Parameters.AddWithValue("@ts", "Tagged");
                            cmd2.Parameters.AddWithValue("@aid", obj.AssetID);
                            con2.Open();
                            int rows2 = cmd2.ExecuteNonQuery();
                            con2.Close();
                            IsTagged = true;


                        }


                    }
                }
                con.Close();
            }

            return IsTagged;
        }


        public bool DeTagAsset(int intAssetId)
        {
            //throw new NotImplementedException();
            bool IsDetaged = false;
            if (intAssetId == 0)
            {
                IsDetaged = false;
            }
            else
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "update AssetTagging set ReleaseDate=@rd where AssetID=@aid";
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("@rd", DateTime.Now);
                cmd.Parameters.AddWithValue("@aid", intAssetId);
                con.Open();
                int rows = cmd.ExecuteNonQuery();
                con.Close();
                if (rows > 0)
                {
                    IsDetaged = true;
                }
                else
                {
                    IsDetaged = false;
                }
                if (IsDetaged == true)
                {

                    SqlConnection con1 = new SqlConnection(ConnectionString);
                    SqlCommand cmd1 = new SqlCommand();
                    cmd1.CommandText = "update Asset set TaggingStatus=@ts where AssetID=@aid";
                    cmd1.Connection = con;
                    cmd1.Parameters.AddWithValue("@ts", "Free Pool");
                    cmd1.Parameters.AddWithValue("@aid", intAssetId);
                    con.Open();
                    int rows2 = cmd1.ExecuteNonQuery();
                    if (rows2 > 0)
                    {
                        IsDetaged = true;
                    }
                    else
                    {
                        IsDetaged = false;
                    }
                }
                else
                {
                    IsDetaged = false;
                }
            }
            return IsDetaged;
        }

    }
}
           
//---------------------MovieTicketing-------------------------------
using System;
using System.Data.SqlClient;

namespace MovieTicketing
{
    public class TicketingDataAccess
    {
        string ConnectionString = "Data Source=.;Initial Catalog=MovieTicketing;User ID=sa;Password=wipro@123";

        public bool AddMovie(Movies obj)
        {
            bool Isupdated = false;
            if (obj != null)
            {
             
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "Insert into Movies(MovieName,Director,PlaysPerDay,TicketPrice)values(@mn,@dir,@ppd,@tp)";
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("@mn", obj.MovieName);
                cmd.Parameters.AddWithValue("@dir", obj.DirectorName);
                cmd.Parameters.AddWithValue("@ppd", obj.PlaysPerDay);
                cmd.Parameters.AddWithValue("@tp", obj.TicketPrice);
                con.Open();
              
                int rowCount = cmd.ExecuteNonQuery();
                con.Close();
                if (rowCount == 1)
                {
                    Isupdated = true;
                }
                else
                {
                    Isupdated = false;
                }
               
            }
          
            return Isupdated;
        }

        public bool AddTheatre(Theatres obj)
        {

            bool Isupdated = false;
            if (obj != null)
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "Insert into Theatres(TheatreName,SeatingCapacity)values(@tn,@sc)";
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("@tn", obj.TheatreName);
                cmd.Parameters.AddWithValue("@sc", obj.SeatingCapacity);
                
                con.Open();
               
                int rowCount = cmd.ExecuteNonQuery();
                con.Close();
                if (rowCount == 1)
                {
                    Isupdated = true;
                }
                else
                {
                    Isupdated = false;
                }
            }
         
            return Isupdated;
        }

        public bool AddShow(Shows obj)
        {
            bool Isupdated = false;
            if (obj != null)
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "Insert into Shows (TheatreID,MovieID,StartDate,EndDate,StartTime,EndTime)values(@tid,@mid,@sd,@ed,@st,@et)";
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("tid", obj.TheatreID);
                cmd.Parameters.AddWithValue("mid", obj.MovieID);
                cmd.Parameters.AddWithValue("sd", obj.StartDate);
                cmd.Parameters.AddWithValue("ed", obj.EndDate);
                cmd.Parameters.AddWithValue("st", obj.StartTime);
                cmd.Parameters.AddWithValue("et", obj.EndTime);
                con.Open();
                
                int rowcount = cmd.ExecuteNonQuery();
                con.Close();
                if (rowcount == 1)
                {
                    Isupdated = true;
                }
                else
                {
                    Isupdated = false;
                }

            }
         
            return Isupdated;

        }

        public string AddTicket(Tickets obj)
        {
            string moviename = "";
            decimal ticketprice;
            bool Isupdated = false;
            if(obj!=null)
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                string query = "Select m.MovieName,m.TicketPrice from Movies m JOIN Shows s on m.MovieID=s.MovieID JOIN Tickets t on t.ShowID=s.ShowID where t.ShowID=@sid";
                SqlCommand cmd = new SqlCommand(query,con);
                cmd.Connection = con;
                cmd.Parameters.AddWithValue("@sid", obj.ShowID);
                con.Open();
                SqlDataReader dr = cmd.ExecuteReader();
                if(dr.HasRows)
                {
                    dr.Read();
                    moviename = dr["MovieName"].ToString();
                    ticketprice = decimal.Parse(dr["TicketPrice"].ToString());
                }
                else
                {
                    return null;
                }
                con.Close();
                obj.Amount= obj.NumberofPersons * ticketprice;
                string RefrenceCode = obj.CustomerName[0].ToString() + obj.CustomerName[1].ToString() + obj.NumberofPersons.ToString() + moviename[0].ToString()
                    + moviename[1].ToString() + obj.BookingDate.Day.ToString() + obj.BookingDate.Month.ToString();
                Random rd = new Random();
                int randomnumber = rd.Next(1, 1000);
                RefrenceCode = RefrenceCode + randomnumber.ToString();
                obj.ReferenceCode = RefrenceCode.ToUpper();

                SqlCommand cmd1 = new SqlCommand();
                cmd1.CommandText = "Insert into Tickets(ShowID,ReferenceCode,CustomerName,BookingDate,Amount,NumberOfPersons,TicketStatus)values(@sid,@rcd,@cn,@bd,@am,@np,@ts)";
                cmd1.Connection = con;
                cmd1.Parameters.AddWithValue("@sid", obj.ShowID);
                cmd1.Parameters.AddWithValue("@rcd", obj.ReferenceCode);
                cmd1.Parameters.AddWithValue("@cn", obj.CustomerName);
                cmd1.Parameters.AddWithValue("@bd", obj.BookingDate);
                cmd1.Parameters.AddWithValue("@am", obj.Amount);
                cmd1.Parameters.AddWithValue("@np", obj.NumberofPersons);
                cmd1.Parameters.AddWithValue("@ts", obj.TicketStatus);
                con.Open();
                int rowcount = cmd1.ExecuteNonQuery();
                if(rowcount==1)
                {
                    return obj.ReferenceCode;
                }
                else
                {
                    return null;
                }
               
            }
            return null;
        }


        public int DeleteMovie(int intMovieID)
        {
            int rowsDel = 0;
            if (intMovieID != 0)
            {
                SqlConnection con = new SqlConnection(ConnectionString);
                SqlCommand cmd1 = new SqlCommand("Select ShowID from Shows where MovieID=@mid", con);
                cmd1.Parameters.AddWithValue("@mid", intMovieID);
                con.Open();
                SqlDataReader drr = cmd1.ExecuteReader();
                if (drr.HasRows)
                {

                    while (drr.Read())
                    {
                        int ShowID = int.Parse(drr["ShowID"].ToString());
                        SqlConnection con1 = new SqlConnection(ConnectionString);
                        SqlCommand cmd2 = new SqlCommand("Delete  from Tickets where ShowID=@sid", con1);
                        cmd2.Parameters.AddWithValue("@sid", ShowID);
                        con1.Open();
                        int rows = cmd2.ExecuteNonQuery();
                        rowsDel += rows;
                        con1.Close();
                        if (rowsDel > 0)
                        {
                            SqlConnection con2 = new SqlConnection(ConnectionString);
                            SqlCommand cmd3 = new SqlCommand("Delete from Shows Where ShowID=@sid", con2);
                            cmd3.Parameters.AddWithValue("@sid", ShowID);
                            con2.Open();
                            int rowCount = cmd3.ExecuteNonQuery();
                            rowsDel += rowCount;
                            con2.Close();
                            if (rowCount > 0)
                            {

                                SqlConnection con3 = new SqlConnection(ConnectionString);
                                SqlCommand cmd4 = new SqlCommand("Delete from Movies Where MovieID=@mid", con3);
                                cmd4.Parameters.AddWithValue("@mid", intMovieID);
                                con3.Open();
                                int delrows = cmd4.ExecuteNonQuery();
                                rowsDel += delrows;
                                con3.Close();
                                if (delrows == 1)
                                    return rowsDel;
                                else
                                    return rowsDel;
                            }

                        }

                    }
                }
                con.Close();
                return rowsDel;
            }
            else
                return rowsDel;

        }
    }
}

_____________________________________________________________________________________________________

LIBRARY
--------------
.............................................................

Library
.............
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LibraryManagement
{

    public class Book
    {
        public int BookID{ get; set; }
        public string BookName { get; set; }
        public int YearPublished { get; set; }
        public string AuthorName { get; set; }
        public decimal Price { get; set; }
        public int TotalAvailability { get; set; }

        SqlConnection scon;
        SqlCommand scmd;
        SqlDataAdapter sda;
        SqlDataReader sdr;
        string str;
        int result;
        const string ConnectionString = "Data Source=.;Initial Catalog=Library;User ID=sa;Password=wipro@123;";
        
        // TODO: Define the Properties here.
        public Book()
        {
            scon = new SqlConnection(ConnectionString);
        }
        public bool AddBook(Book obj)
        {
            // TODO: Write your code here.
            // Note: remove,  throw new NotImplementedException(); before you write the code.

            //throw new NotImplementedException();
            bool isadded = false;
            if(obj==null)
            {
                return isadded;
            }
            else
            {
                str = "insert into Book values(@bname,@yearpub,@aname,@price,@totalava)";
                scmd = new SqlCommand(str, scon);
               // scmd.Parameters.AddWithValue("@bid", obj.BookID);
                scmd.Parameters.AddWithValue("@bname", obj.BookName);
                scmd.Parameters.AddWithValue("@yearpub", obj.YearPublished);
                scmd.Parameters.AddWithValue("@aname", obj.AuthorName);
                scmd.Parameters.AddWithValue("@price", obj.Price);
                scmd.Parameters.AddWithValue("@totalava", obj.TotalAvailability);
                scon.Open();
                result = scmd.ExecuteNonQuery();
                scon.Close();
                if(result>0)
                {
                    isadded = true;
                }
                else
                {
                    isadded = false;
                }
                return isadded;
            }
        }

        public Book SearchBook(int intBookID)
        {
            // TODO: Write your code here.
            // Note: remove,  throw new NotImplementedException(); before you write the code.

            //  throw new NotImplementedException();
            if (intBookID == 0||intBookID==-1)
            {
                return null;
            }
            else
            {
                Book obj = new Book();
                str = "select * from Book where BookID=@bookid";
                scmd = new SqlCommand(str, scon);
                scmd.Parameters.AddWithValue("@bookid", intBookID);
                scon.Open();
                sdr = scmd.ExecuteReader();
                sdr.Read();
                if(sdr.HasRows)
                {
                    obj.BookID =Convert.ToInt32(sdr.GetValue(0).ToString());
                    obj.BookName= (sdr.GetValue(1).ToString());
                    obj.YearPublished=Convert.ToInt32(sdr.GetValue(2).ToString());
                    obj.AuthorName= (sdr.GetValue(3).ToString());
                    obj.Price=Convert.ToDecimal(sdr.GetValue(4).ToString());
                    obj.TotalAvailability=Convert.ToInt32(sdr.GetValue(5).ToString());
                }
                return obj;
              
            }
        }

        public List<Book> GetAllBooks()
        {

            // TODO: Write your code here.
            // Note: remove,  throw new NotImplementedException(); before you write the code.

            // throw new NotImplementedException();
            try
            {
                str = "select * from Book";
                scmd = new SqlCommand(str, scon);
                scon.Open();
                sdr = scmd.ExecuteReader();
                List<Book> lt = new List<Book>();
                Book obj = new Book();
                while (sdr.Read())
                {
                    obj.BookID = Convert.ToInt32(sdr.GetValue(0).ToString());
                    obj.BookName = (sdr.GetValue(1).ToString());
                    obj.YearPublished = Convert.ToInt32(sdr.GetValue(2).ToString());
                    obj.AuthorName = (sdr.GetValue(3).ToString());
                    obj.Price = Convert.ToDecimal(sdr.GetValue(4).ToString());
                    obj.TotalAvailability = Convert.ToInt32(sdr.GetValue(5).ToString());

                }
                return lt;
            }
            catch (SqlException vat)
            {
                throw vat;
            }
            finally
            {
                scon.Close();
            }
        }
    }
}

       
   

